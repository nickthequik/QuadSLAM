// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module bd_776d_hsc_0_v_hscaler_AXIvideo2MultiPixStream57 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        s_axis_video_TDATA,
        s_axis_video_TVALID,
        s_axis_video_TREADY,
        s_axis_video_TKEEP,
        s_axis_video_TSTRB,
        s_axis_video_TUSER,
        s_axis_video_TLAST,
        s_axis_video_TID,
        s_axis_video_TDEST,
        img_V_val_V_din,
        img_V_val_V_full_n,
        img_V_val_V_write,
        Height,
        WidthIn,
        colorMode,
        HwReg_WidthOut,
        Height_out_din,
        Height_out_full_n,
        Height_out_write,
        WidthIn_out_din,
        WidthIn_out_full_n,
        WidthIn_out_write,
        colorMode_out_din,
        colorMode_out_full_n,
        colorMode_out_write,
        HwReg_WidthOut_out_din,
        HwReg_WidthOut_out_full_n,
        HwReg_WidthOut_out_write
);

parameter    ap_ST_st1_fsm_0 = 7'b1;
parameter    ap_ST_st2_fsm_1 = 7'b10;
parameter    ap_ST_st3_fsm_2 = 7'b100;
parameter    ap_ST_st4_fsm_3 = 7'b1000;
parameter    ap_ST_pp1_stg0_fsm_4 = 7'b10000;
parameter    ap_ST_pp2_stg0_fsm_5 = 7'b100000;
parameter    ap_ST_st9_fsm_6 = 7'b1000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv2_2 = 2'b10;
parameter    ap_const_lv2_3 = 2'b11;
parameter    ap_const_lv2_1 = 2'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv12_0 = 12'b000000000000;
parameter    ap_const_lv8_0 = 8'b00000000;
parameter    ap_const_lv12_1 = 12'b1;
parameter    ap_const_lv32_10 = 32'b10000;
parameter    ap_const_lv32_17 = 32'b10111;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_F = 32'b1111;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [23:0] s_axis_video_TDATA;
input   s_axis_video_TVALID;
output   s_axis_video_TREADY;
input  [2:0] s_axis_video_TKEEP;
input  [2:0] s_axis_video_TSTRB;
input  [0:0] s_axis_video_TUSER;
input  [0:0] s_axis_video_TLAST;
input  [0:0] s_axis_video_TID;
input  [0:0] s_axis_video_TDEST;
output  [23:0] img_V_val_V_din;
input   img_V_val_V_full_n;
output   img_V_val_V_write;
input  [15:0] Height;
input  [15:0] WidthIn;
input  [7:0] colorMode;
input  [15:0] HwReg_WidthOut;
output  [15:0] Height_out_din;
input   Height_out_full_n;
output   Height_out_write;
output  [15:0] WidthIn_out_din;
input   WidthIn_out_full_n;
output   WidthIn_out_write;
output  [7:0] colorMode_out_din;
input   colorMode_out_full_n;
output   colorMode_out_write;
output  [15:0] HwReg_WidthOut_out_din;
input   HwReg_WidthOut_out_full_n;
output   HwReg_WidthOut_out_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg img_V_val_V_write;
reg Height_out_write;
reg WidthIn_out_write;
reg colorMode_out_write;
reg HwReg_WidthOut_out_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_25;
reg   [23:0] AXI_video_strm_V_data_V_0_data_out;
wire    AXI_video_strm_V_data_V_0_vld_in;
wire    AXI_video_strm_V_data_V_0_vld_out;
wire    AXI_video_strm_V_data_V_0_ack_in;
reg    AXI_video_strm_V_data_V_0_ack_out;
reg   [23:0] AXI_video_strm_V_data_V_0_payload_A;
reg   [23:0] AXI_video_strm_V_data_V_0_payload_B;
reg    AXI_video_strm_V_data_V_0_sel_rd;
reg    AXI_video_strm_V_data_V_0_sel_wr;
wire    AXI_video_strm_V_data_V_0_sel;
wire    AXI_video_strm_V_data_V_0_load_A;
wire    AXI_video_strm_V_data_V_0_load_B;
reg   [1:0] AXI_video_strm_V_data_V_0_state;
wire    AXI_video_strm_V_data_V_0_state_cmp_full;
reg   [0:0] AXI_video_strm_V_user_V_0_data_out;
wire    AXI_video_strm_V_user_V_0_vld_in;
wire    AXI_video_strm_V_user_V_0_vld_out;
wire    AXI_video_strm_V_user_V_0_ack_in;
reg    AXI_video_strm_V_user_V_0_ack_out;
reg   [0:0] AXI_video_strm_V_user_V_0_payload_A;
reg   [0:0] AXI_video_strm_V_user_V_0_payload_B;
reg    AXI_video_strm_V_user_V_0_sel_rd;
reg    AXI_video_strm_V_user_V_0_sel_wr;
wire    AXI_video_strm_V_user_V_0_sel;
wire    AXI_video_strm_V_user_V_0_load_A;
wire    AXI_video_strm_V_user_V_0_load_B;
reg   [1:0] AXI_video_strm_V_user_V_0_state;
wire    AXI_video_strm_V_user_V_0_state_cmp_full;
reg   [0:0] AXI_video_strm_V_last_V_0_data_out;
wire    AXI_video_strm_V_last_V_0_vld_in;
wire    AXI_video_strm_V_last_V_0_vld_out;
wire    AXI_video_strm_V_last_V_0_ack_in;
reg    AXI_video_strm_V_last_V_0_ack_out;
reg   [0:0] AXI_video_strm_V_last_V_0_payload_A;
reg   [0:0] AXI_video_strm_V_last_V_0_payload_B;
reg    AXI_video_strm_V_last_V_0_sel_rd;
reg    AXI_video_strm_V_last_V_0_sel_wr;
wire    AXI_video_strm_V_last_V_0_sel;
wire    AXI_video_strm_V_last_V_0_load_A;
wire    AXI_video_strm_V_last_V_0_load_B;
reg   [1:0] AXI_video_strm_V_last_V_0_state;
wire    AXI_video_strm_V_last_V_0_state_cmp_full;
wire    AXI_video_strm_V_dest_V_0_vld_in;
reg    AXI_video_strm_V_dest_V_0_ack_out;
reg   [1:0] AXI_video_strm_V_dest_V_0_state;
reg    s_axis_video_TDATA_blk_n;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_469;
reg    ap_sig_cseq_ST_pp1_stg0_fsm_4;
reg    ap_sig_476;
reg    ap_reg_ppiten_pp1_it1;
reg    ap_reg_ppiten_pp1_it0;
reg   [0:0] exitcond3_i_i_reg_516;
reg   [0:0] brmerge_i_i_reg_525;
reg    ap_sig_cseq_ST_pp2_stg0_fsm_5;
reg    ap_sig_495;
reg    ap_reg_ppiten_pp2_it1;
reg    ap_reg_ppiten_pp2_it0;
reg   [0:0] eol_2_i_i_reg_294;
reg    img_V_val_V_blk_n;
reg    Height_out_blk_n;
reg    WidthIn_out_blk_n;
reg    colorMode_out_blk_n;
reg    HwReg_WidthOut_out_blk_n;
reg   [0:0] eol_i_i_reg_224;
reg   [11:0] j_i_i_reg_236;
reg   [0:0] eol_reg_247;
reg   [23:0] axi_data_V_1_i_i_reg_258;
reg   [0:0] axi_last_V_3_i_i_reg_305;
reg   [23:0] axi_data_V_3_i_i_reg_317;
reg    ap_sig_545;
wire   [12:0] tmp_fu_339_p1;
reg   [12:0] tmp_reg_470;
reg   [23:0] tmp_data_V_reg_475;
reg   [0:0] tmp_last_V_reg_483;
wire   [12:0] tmp_43_fu_347_p1;
reg   [12:0] tmp_43_reg_495;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_566;
wire   [0:0] sel_tmp2_fu_350_p2;
reg   [0:0] sel_tmp2_reg_500;
wire   [0:0] exitcond2_i_i_fu_364_p2;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_577;
wire   [11:0] i_fu_369_p2;
reg   [11:0] i_reg_511;
wire   [0:0] exitcond3_i_i_fu_379_p2;
reg    ap_sig_586;
wire   [11:0] j_fu_384_p2;
wire   [0:0] brmerge_i_i_fu_393_p2;
reg    ap_sig_599;
reg   [0:0] eol_2_i_i_phi_fu_297_p4;
reg   [0:0] axi_last_V1_i_i_reg_193;
reg    ap_sig_cseq_ST_st9_fsm_6;
reg    ap_sig_624;
reg   [23:0] axi_data_V1_i_i_reg_203;
reg   [11:0] i_i_i_reg_213;
reg   [0:0] eol_i_i_phi_fu_228_p4;
reg   [0:0] axi_last_V_2_i_i_phi_fu_274_p4;
reg   [23:0] p_Val2_s_phi_fu_286_p4;
wire   [0:0] ap_reg_phiprechg_axi_last_V_2_i_i_reg_269pp1_it1;
wire   [23:0] ap_reg_phiprechg_p_Val2_s_reg_282pp1_it1;
reg   [0:0] sof_1_i_i_fu_108;
wire   [12:0] i_cast_i_i_fu_360_p1;
wire   [12:0] j_cast_i_i_fu_375_p1;
wire   [7:0] pix_val_2_V_fu_418_p4;
wire   [7:0] pix_val_0_V_3_fu_404_p4;
wire   [7:0] pix_val_1_V_2_fu_414_p1;
wire   [7:0] pix_val_2_V_1_fu_428_p3;
wire   [7:0] pix_val_1_V_1_fu_435_p3;
wire   [7:0] pix_val_0_V_fu_442_p3;
wire   [0:0] tmp_user_V_fu_343_p1;
reg   [6:0] ap_NS_fsm;
reg    ap_sig_508;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 7'b1;
#0 AXI_video_strm_V_data_V_0_sel_rd = 1'b0;
#0 AXI_video_strm_V_data_V_0_sel_wr = 1'b0;
#0 AXI_video_strm_V_data_V_0_state = 2'b00;
#0 AXI_video_strm_V_user_V_0_sel_rd = 1'b0;
#0 AXI_video_strm_V_user_V_0_sel_wr = 1'b0;
#0 AXI_video_strm_V_user_V_0_state = 2'b00;
#0 AXI_video_strm_V_last_V_0_sel_rd = 1'b0;
#0 AXI_video_strm_V_last_V_0_sel_wr = 1'b0;
#0 AXI_video_strm_V_last_V_0_state = 2'b00;
#0 AXI_video_strm_V_dest_V_0_state = 2'b00;
#0 ap_reg_ppiten_pp1_it1 = 1'b0;
#0 ap_reg_ppiten_pp1_it0 = 1'b0;
#0 ap_reg_ppiten_pp2_it1 = 1'b0;
#0 ap_reg_ppiten_pp2_it0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == AXI_video_strm_V_data_V_0_ack_out) & (1'b1 == AXI_video_strm_V_data_V_0_vld_out))) begin
            AXI_video_strm_V_data_V_0_sel_rd <= ~AXI_video_strm_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == AXI_video_strm_V_data_V_0_vld_in) & (1'b1 == AXI_video_strm_V_data_V_0_ack_in))) begin
            AXI_video_strm_V_data_V_0_sel_wr <= ~AXI_video_strm_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_data_V_0_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == AXI_video_strm_V_data_V_0_vld_in) & (1'b1 == AXI_video_strm_V_data_V_0_ack_out) & (AXI_video_strm_V_data_V_0_state == ap_const_lv2_3)) | ((1'b0 == AXI_video_strm_V_data_V_0_vld_in) & (AXI_video_strm_V_data_V_0_state == ap_const_lv2_2)))) begin
            AXI_video_strm_V_data_V_0_state <= ap_const_lv2_2;
        end else if ((((1'b1 == AXI_video_strm_V_data_V_0_vld_in) & (1'b0 == AXI_video_strm_V_data_V_0_ack_out) & (AXI_video_strm_V_data_V_0_state == ap_const_lv2_3)) | ((1'b0 == AXI_video_strm_V_data_V_0_ack_out) & (AXI_video_strm_V_data_V_0_state == ap_const_lv2_1)))) begin
            AXI_video_strm_V_data_V_0_state <= ap_const_lv2_1;
        end else if ((((1'b1 == AXI_video_strm_V_data_V_0_vld_in) & (AXI_video_strm_V_data_V_0_state == ap_const_lv2_2)) | ((1'b1 == AXI_video_strm_V_data_V_0_ack_out) & (AXI_video_strm_V_data_V_0_state == ap_const_lv2_1)) | ((AXI_video_strm_V_data_V_0_state == ap_const_lv2_3) & ~((1'b1 == AXI_video_strm_V_data_V_0_vld_in) & (1'b0 == AXI_video_strm_V_data_V_0_ack_out)) & ~((1'b0 == AXI_video_strm_V_data_V_0_vld_in) & (1'b1 == AXI_video_strm_V_data_V_0_ack_out))))) begin
            AXI_video_strm_V_data_V_0_state <= ap_const_lv2_3;
        end else begin
            AXI_video_strm_V_data_V_0_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_dest_V_0_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == AXI_video_strm_V_dest_V_0_vld_in) & (1'b1 == AXI_video_strm_V_dest_V_0_ack_out) & (ap_const_lv2_3 == AXI_video_strm_V_dest_V_0_state)) | ((1'b0 == AXI_video_strm_V_dest_V_0_vld_in) & (ap_const_lv2_2 == AXI_video_strm_V_dest_V_0_state)))) begin
            AXI_video_strm_V_dest_V_0_state <= ap_const_lv2_2;
        end else if ((((1'b1 == AXI_video_strm_V_dest_V_0_vld_in) & (1'b0 == AXI_video_strm_V_dest_V_0_ack_out) & (ap_const_lv2_3 == AXI_video_strm_V_dest_V_0_state)) | ((1'b0 == AXI_video_strm_V_dest_V_0_ack_out) & (ap_const_lv2_1 == AXI_video_strm_V_dest_V_0_state)))) begin
            AXI_video_strm_V_dest_V_0_state <= ap_const_lv2_1;
        end else if ((((1'b1 == AXI_video_strm_V_dest_V_0_vld_in) & (ap_const_lv2_2 == AXI_video_strm_V_dest_V_0_state)) | ((1'b1 == AXI_video_strm_V_dest_V_0_ack_out) & (ap_const_lv2_1 == AXI_video_strm_V_dest_V_0_state)) | ((ap_const_lv2_3 == AXI_video_strm_V_dest_V_0_state) & ~((1'b1 == AXI_video_strm_V_dest_V_0_vld_in) & (1'b0 == AXI_video_strm_V_dest_V_0_ack_out)) & ~((1'b0 == AXI_video_strm_V_dest_V_0_vld_in) & (1'b1 == AXI_video_strm_V_dest_V_0_ack_out))))) begin
            AXI_video_strm_V_dest_V_0_state <= ap_const_lv2_3;
        end else begin
            AXI_video_strm_V_dest_V_0_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_last_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == AXI_video_strm_V_last_V_0_ack_out) & (1'b1 == AXI_video_strm_V_last_V_0_vld_out))) begin
            AXI_video_strm_V_last_V_0_sel_rd <= ~AXI_video_strm_V_last_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_last_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == AXI_video_strm_V_last_V_0_vld_in) & (1'b1 == AXI_video_strm_V_last_V_0_ack_in))) begin
            AXI_video_strm_V_last_V_0_sel_wr <= ~AXI_video_strm_V_last_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_last_V_0_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == AXI_video_strm_V_last_V_0_vld_in) & (1'b1 == AXI_video_strm_V_last_V_0_ack_out) & (ap_const_lv2_3 == AXI_video_strm_V_last_V_0_state)) | ((1'b0 == AXI_video_strm_V_last_V_0_vld_in) & (ap_const_lv2_2 == AXI_video_strm_V_last_V_0_state)))) begin
            AXI_video_strm_V_last_V_0_state <= ap_const_lv2_2;
        end else if ((((1'b1 == AXI_video_strm_V_last_V_0_vld_in) & (1'b0 == AXI_video_strm_V_last_V_0_ack_out) & (ap_const_lv2_3 == AXI_video_strm_V_last_V_0_state)) | ((1'b0 == AXI_video_strm_V_last_V_0_ack_out) & (ap_const_lv2_1 == AXI_video_strm_V_last_V_0_state)))) begin
            AXI_video_strm_V_last_V_0_state <= ap_const_lv2_1;
        end else if ((((1'b1 == AXI_video_strm_V_last_V_0_vld_in) & (ap_const_lv2_2 == AXI_video_strm_V_last_V_0_state)) | ((1'b1 == AXI_video_strm_V_last_V_0_ack_out) & (ap_const_lv2_1 == AXI_video_strm_V_last_V_0_state)) | ((ap_const_lv2_3 == AXI_video_strm_V_last_V_0_state) & ~((1'b1 == AXI_video_strm_V_last_V_0_vld_in) & (1'b0 == AXI_video_strm_V_last_V_0_ack_out)) & ~((1'b0 == AXI_video_strm_V_last_V_0_vld_in) & (1'b1 == AXI_video_strm_V_last_V_0_ack_out))))) begin
            AXI_video_strm_V_last_V_0_state <= ap_const_lv2_3;
        end else begin
            AXI_video_strm_V_last_V_0_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_user_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == AXI_video_strm_V_user_V_0_ack_out) & (1'b1 == AXI_video_strm_V_user_V_0_vld_out))) begin
            AXI_video_strm_V_user_V_0_sel_rd <= ~AXI_video_strm_V_user_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_user_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == AXI_video_strm_V_user_V_0_vld_in) & (1'b1 == AXI_video_strm_V_user_V_0_ack_in))) begin
            AXI_video_strm_V_user_V_0_sel_wr <= ~AXI_video_strm_V_user_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_user_V_0_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == AXI_video_strm_V_user_V_0_vld_in) & (1'b1 == AXI_video_strm_V_user_V_0_ack_out) & (ap_const_lv2_3 == AXI_video_strm_V_user_V_0_state)) | ((1'b0 == AXI_video_strm_V_user_V_0_vld_in) & (ap_const_lv2_2 == AXI_video_strm_V_user_V_0_state)))) begin
            AXI_video_strm_V_user_V_0_state <= ap_const_lv2_2;
        end else if ((((1'b1 == AXI_video_strm_V_user_V_0_vld_in) & (1'b0 == AXI_video_strm_V_user_V_0_ack_out) & (ap_const_lv2_3 == AXI_video_strm_V_user_V_0_state)) | ((1'b0 == AXI_video_strm_V_user_V_0_ack_out) & (ap_const_lv2_1 == AXI_video_strm_V_user_V_0_state)))) begin
            AXI_video_strm_V_user_V_0_state <= ap_const_lv2_1;
        end else if ((((1'b1 == AXI_video_strm_V_user_V_0_vld_in) & (ap_const_lv2_2 == AXI_video_strm_V_user_V_0_state)) | ((1'b1 == AXI_video_strm_V_user_V_0_ack_out) & (ap_const_lv2_1 == AXI_video_strm_V_user_V_0_state)) | ((ap_const_lv2_3 == AXI_video_strm_V_user_V_0_state) & ~((1'b1 == AXI_video_strm_V_user_V_0_vld_in) & (1'b0 == AXI_video_strm_V_user_V_0_ack_out)) & ~((1'b0 == AXI_video_strm_V_user_V_0_vld_in) & (1'b1 == AXI_video_strm_V_user_V_0_ack_out))))) begin
            AXI_video_strm_V_user_V_0_state <= ap_const_lv2_3;
        end else begin
            AXI_video_strm_V_user_V_0_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_sig_cseq_ST_st4_fsm_3) & ~(1'b0 == exitcond2_i_i_fu_364_p2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp1_it0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_sig_cseq_ST_pp1_stg0_fsm_4) & ~((1'b1 == ap_reg_ppiten_pp1_it1) & ap_sig_586) & ~(1'b0 == exitcond3_i_i_fu_379_p2))) begin
            ap_reg_ppiten_pp1_it0 <= 1'b0;
        end else if (((1'b1 == ap_sig_cseq_ST_st4_fsm_3) & (1'b0 == exitcond2_i_i_fu_364_p2))) begin
            ap_reg_ppiten_pp1_it0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp1_it1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_sig_cseq_ST_pp1_stg0_fsm_4) & ~((1'b1 == ap_reg_ppiten_pp1_it1) & ap_sig_586))) begin
            ap_reg_ppiten_pp1_it1 <= ap_reg_ppiten_pp1_it0;
        end else if (((1'b1 == ap_sig_cseq_ST_st4_fsm_3) & (1'b0 == exitcond2_i_i_fu_364_p2))) begin
            ap_reg_ppiten_pp1_it1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp2_it0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_sig_cseq_ST_pp2_stg0_fsm_5) & ~((1'b1 == ap_reg_ppiten_pp2_it1) & ap_sig_599) & ~(1'b0 == eol_2_i_i_phi_fu_297_p4))) begin
            ap_reg_ppiten_pp2_it0 <= 1'b0;
        end else if (((1'b1 == ap_sig_cseq_ST_pp1_stg0_fsm_4) & (1'b1 == ap_reg_ppiten_pp1_it1) & ~((1'b1 == ap_reg_ppiten_pp1_it1) & ap_sig_586) & ~(1'b0 == exitcond3_i_i_reg_516))) begin
            ap_reg_ppiten_pp2_it0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp2_it1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_sig_cseq_ST_pp2_stg0_fsm_5) & ~((1'b1 == ap_reg_ppiten_pp2_it1) & ap_sig_599))) begin
            ap_reg_ppiten_pp2_it1 <= ap_reg_ppiten_pp2_it0;
        end else if (((1'b1 == ap_sig_cseq_ST_pp1_stg0_fsm_4) & (1'b1 == ap_reg_ppiten_pp1_it1) & ~((1'b1 == ap_reg_ppiten_pp1_it1) & ap_sig_586) & ~(1'b0 == exitcond3_i_i_reg_516))) begin
            ap_reg_ppiten_pp2_it1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st9_fsm_6)) begin
        axi_data_V1_i_i_reg_203 <= axi_data_V_3_i_i_reg_317;
    end else if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        axi_data_V1_i_i_reg_203 <= tmp_data_V_reg_475;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_pp1_stg0_fsm_4) & (1'b1 == ap_reg_ppiten_pp1_it1) & (1'b0 == exitcond3_i_i_reg_516) & ~((1'b1 == ap_reg_ppiten_pp1_it1) & ap_sig_586))) begin
        axi_data_V_1_i_i_reg_258 <= p_Val2_s_phi_fu_286_p4;
    end else if (((1'b1 == ap_sig_cseq_ST_st4_fsm_3) & (1'b0 == exitcond2_i_i_fu_364_p2))) begin
        axi_data_V_1_i_i_reg_258 <= axi_data_V1_i_i_reg_203;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_pp1_stg0_fsm_4) & (1'b1 == ap_reg_ppiten_pp1_it1) & ~((1'b1 == ap_reg_ppiten_pp1_it1) & ap_sig_586) & ~(1'b0 == exitcond3_i_i_reg_516))) begin
        axi_data_V_3_i_i_reg_317 <= axi_data_V_1_i_i_reg_258;
    end else if (((1'b1 == ap_sig_cseq_ST_pp2_stg0_fsm_5) & (1'b1 == ap_reg_ppiten_pp2_it1) & (1'b0 == eol_2_i_i_reg_294) & ~((1'b1 == ap_reg_ppiten_pp2_it1) & ap_sig_599))) begin
        axi_data_V_3_i_i_reg_317 <= AXI_video_strm_V_data_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st9_fsm_6)) begin
        axi_last_V1_i_i_reg_193 <= axi_last_V_3_i_i_reg_305;
    end else if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        axi_last_V1_i_i_reg_193 <= tmp_last_V_reg_483;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_pp1_stg0_fsm_4) & (1'b1 == ap_reg_ppiten_pp1_it1) & ~((1'b1 == ap_reg_ppiten_pp1_it1) & ap_sig_586) & ~(1'b0 == exitcond3_i_i_reg_516))) begin
        axi_last_V_3_i_i_reg_305 <= eol_reg_247;
    end else if (((1'b1 == ap_sig_cseq_ST_pp2_stg0_fsm_5) & (1'b1 == ap_reg_ppiten_pp2_it1) & (1'b0 == eol_2_i_i_reg_294) & ~((1'b1 == ap_reg_ppiten_pp2_it1) & ap_sig_599))) begin
        axi_last_V_3_i_i_reg_305 <= AXI_video_strm_V_last_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_pp1_stg0_fsm_4) & (1'b1 == ap_reg_ppiten_pp1_it1) & ~((1'b1 == ap_reg_ppiten_pp1_it1) & ap_sig_586) & ~(1'b0 == exitcond3_i_i_reg_516))) begin
        eol_2_i_i_reg_294 <= eol_i_i_reg_224;
    end else if (((1'b1 == ap_sig_cseq_ST_pp2_stg0_fsm_5) & (1'b1 == ap_reg_ppiten_pp2_it1) & (1'b0 == eol_2_i_i_reg_294) & ~((1'b1 == ap_reg_ppiten_pp2_it1) & ap_sig_599))) begin
        eol_2_i_i_reg_294 <= AXI_video_strm_V_last_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_pp1_stg0_fsm_4) & (1'b1 == ap_reg_ppiten_pp1_it1) & (1'b0 == exitcond3_i_i_reg_516) & ~((1'b1 == ap_reg_ppiten_pp1_it1) & ap_sig_586))) begin
        eol_i_i_reg_224 <= axi_last_V_2_i_i_phi_fu_274_p4;
    end else if (((1'b1 == ap_sig_cseq_ST_st4_fsm_3) & (1'b0 == exitcond2_i_i_fu_364_p2))) begin
        eol_i_i_reg_224 <= 1'b0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_pp1_stg0_fsm_4) & (1'b1 == ap_reg_ppiten_pp1_it1) & (1'b0 == exitcond3_i_i_reg_516) & ~((1'b1 == ap_reg_ppiten_pp1_it1) & ap_sig_586))) begin
        eol_reg_247 <= axi_last_V_2_i_i_phi_fu_274_p4;
    end else if (((1'b1 == ap_sig_cseq_ST_st4_fsm_3) & (1'b0 == exitcond2_i_i_fu_364_p2))) begin
        eol_reg_247 <= axi_last_V1_i_i_reg_193;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st9_fsm_6)) begin
        i_i_i_reg_213 <= i_reg_511;
    end else if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        i_i_i_reg_213 <= ap_const_lv12_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_pp1_stg0_fsm_4) & (1'b1 == ap_reg_ppiten_pp1_it0) & ~((1'b1 == ap_reg_ppiten_pp1_it1) & ap_sig_586) & (1'b0 == exitcond3_i_i_fu_379_p2))) begin
        j_i_i_reg_236 <= j_fu_384_p2;
    end else if (((1'b1 == ap_sig_cseq_ST_st4_fsm_3) & (1'b0 == exitcond2_i_i_fu_364_p2))) begin
        j_i_i_reg_236 <= ap_const_lv12_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_pp1_stg0_fsm_4) & (1'b1 == ap_reg_ppiten_pp1_it0) & ~((1'b1 == ap_reg_ppiten_pp1_it1) & ap_sig_586) & (1'b0 == exitcond3_i_i_fu_379_p2))) begin
        sof_1_i_i_fu_108 <= 1'b0;
    end else if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        sof_1_i_i_fu_108 <= 1'b1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == AXI_video_strm_V_data_V_0_load_A)) begin
        AXI_video_strm_V_data_V_0_payload_A <= s_axis_video_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == AXI_video_strm_V_data_V_0_load_B)) begin
        AXI_video_strm_V_data_V_0_payload_B <= s_axis_video_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == AXI_video_strm_V_last_V_0_load_A)) begin
        AXI_video_strm_V_last_V_0_payload_A <= s_axis_video_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == AXI_video_strm_V_last_V_0_load_B)) begin
        AXI_video_strm_V_last_V_0_payload_B <= s_axis_video_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == AXI_video_strm_V_user_V_0_load_A)) begin
        AXI_video_strm_V_user_V_0_payload_A <= s_axis_video_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == AXI_video_strm_V_user_V_0_load_B)) begin
        AXI_video_strm_V_user_V_0_payload_B <= s_axis_video_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_pp1_stg0_fsm_4) & ~((1'b1 == ap_reg_ppiten_pp1_it1) & ap_sig_586) & (1'b0 == exitcond3_i_i_fu_379_p2))) begin
        brmerge_i_i_reg_525 <= brmerge_i_i_fu_393_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_pp1_stg0_fsm_4) & ~((1'b1 == ap_reg_ppiten_pp1_it1) & ap_sig_586))) begin
        exitcond3_i_i_reg_516 <= exitcond3_i_i_fu_379_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        i_reg_511 <= i_fu_369_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        sel_tmp2_reg_500 <= sel_tmp2_fu_350_p2;
        tmp_43_reg_495 <= tmp_43_fu_347_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(AXI_video_strm_V_data_V_0_vld_out == 1'b0))) begin
        tmp_data_V_reg_475 <= AXI_video_strm_V_data_V_0_data_out;
        tmp_last_V_reg_483 <= AXI_video_strm_V_last_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_545)) begin
        tmp_reg_470 <= tmp_fu_339_p1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(AXI_video_strm_V_data_V_0_vld_out == 1'b0)) | ((1'b1 == ap_sig_cseq_ST_pp2_stg0_fsm_5) & (1'b1 == ap_reg_ppiten_pp2_it1) & (1'b0 == eol_2_i_i_reg_294) & ~((1'b1 == ap_reg_ppiten_pp2_it1) & ap_sig_599)) | ((1'b1 == ap_sig_cseq_ST_pp1_stg0_fsm_4) & (1'b1 == ap_reg_ppiten_pp1_it1) & (1'b0 == exitcond3_i_i_reg_516) & (1'b0 == brmerge_i_i_reg_525) & ~((1'b1 == ap_reg_ppiten_pp1_it1) & ap_sig_586)))) begin
        AXI_video_strm_V_data_V_0_ack_out = 1'b1;
    end else begin
        AXI_video_strm_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == AXI_video_strm_V_data_V_0_sel)) begin
        AXI_video_strm_V_data_V_0_data_out = AXI_video_strm_V_data_V_0_payload_B;
    end else begin
        AXI_video_strm_V_data_V_0_data_out = AXI_video_strm_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(AXI_video_strm_V_data_V_0_vld_out == 1'b0)) | ((1'b1 == ap_sig_cseq_ST_pp2_stg0_fsm_5) & (1'b1 == ap_reg_ppiten_pp2_it1) & (1'b0 == eol_2_i_i_reg_294) & ~((1'b1 == ap_reg_ppiten_pp2_it1) & ap_sig_599)) | ((1'b1 == ap_sig_cseq_ST_pp1_stg0_fsm_4) & (1'b1 == ap_reg_ppiten_pp1_it1) & (1'b0 == exitcond3_i_i_reg_516) & (1'b0 == brmerge_i_i_reg_525) & ~((1'b1 == ap_reg_ppiten_pp1_it1) & ap_sig_586)))) begin
        AXI_video_strm_V_dest_V_0_ack_out = 1'b1;
    end else begin
        AXI_video_strm_V_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(AXI_video_strm_V_data_V_0_vld_out == 1'b0)) | ((1'b1 == ap_sig_cseq_ST_pp2_stg0_fsm_5) & (1'b1 == ap_reg_ppiten_pp2_it1) & (1'b0 == eol_2_i_i_reg_294) & ~((1'b1 == ap_reg_ppiten_pp2_it1) & ap_sig_599)) | ((1'b1 == ap_sig_cseq_ST_pp1_stg0_fsm_4) & (1'b1 == ap_reg_ppiten_pp1_it1) & (1'b0 == exitcond3_i_i_reg_516) & (1'b0 == brmerge_i_i_reg_525) & ~((1'b1 == ap_reg_ppiten_pp1_it1) & ap_sig_586)))) begin
        AXI_video_strm_V_last_V_0_ack_out = 1'b1;
    end else begin
        AXI_video_strm_V_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == AXI_video_strm_V_last_V_0_sel)) begin
        AXI_video_strm_V_last_V_0_data_out = AXI_video_strm_V_last_V_0_payload_B;
    end else begin
        AXI_video_strm_V_last_V_0_data_out = AXI_video_strm_V_last_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(AXI_video_strm_V_data_V_0_vld_out == 1'b0)) | ((1'b1 == ap_sig_cseq_ST_pp2_stg0_fsm_5) & (1'b1 == ap_reg_ppiten_pp2_it1) & (1'b0 == eol_2_i_i_reg_294) & ~((1'b1 == ap_reg_ppiten_pp2_it1) & ap_sig_599)) | ((1'b1 == ap_sig_cseq_ST_pp1_stg0_fsm_4) & (1'b1 == ap_reg_ppiten_pp1_it1) & (1'b0 == exitcond3_i_i_reg_516) & (1'b0 == brmerge_i_i_reg_525) & ~((1'b1 == ap_reg_ppiten_pp1_it1) & ap_sig_586)))) begin
        AXI_video_strm_V_user_V_0_ack_out = 1'b1;
    end else begin
        AXI_video_strm_V_user_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == AXI_video_strm_V_user_V_0_sel)) begin
        AXI_video_strm_V_user_V_0_data_out = AXI_video_strm_V_user_V_0_payload_B;
    end else begin
        AXI_video_strm_V_user_V_0_data_out = AXI_video_strm_V_user_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~((ap_start == 1'b0) | (ap_done_reg == 1'b1)))) begin
        Height_out_blk_n = Height_out_full_n;
    end else begin
        Height_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_545)) begin
        Height_out_write = 1'b1;
    end else begin
        Height_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~((ap_start == 1'b0) | (ap_done_reg == 1'b1)))) begin
        HwReg_WidthOut_out_blk_n = HwReg_WidthOut_out_full_n;
    end else begin
        HwReg_WidthOut_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_545)) begin
        HwReg_WidthOut_out_write = 1'b1;
    end else begin
        HwReg_WidthOut_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~((ap_start == 1'b0) | (ap_done_reg == 1'b1)))) begin
        WidthIn_out_blk_n = WidthIn_out_full_n;
    end else begin
        WidthIn_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_545)) begin
        WidthIn_out_write = 1'b1;
    end else begin
        WidthIn_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_done_reg) | ((1'b1 == ap_sig_cseq_ST_st4_fsm_3) & ~(1'b0 == exitcond2_i_i_fu_364_p2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st4_fsm_3) & ~(1'b0 == exitcond2_i_i_fu_364_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_476) begin
        ap_sig_cseq_ST_pp1_stg0_fsm_4 = 1'b1;
    end else begin
        ap_sig_cseq_ST_pp1_stg0_fsm_4 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_495) begin
        ap_sig_cseq_ST_pp2_stg0_fsm_5 = 1'b1;
    end else begin
        ap_sig_cseq_ST_pp2_stg0_fsm_5 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_25) begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_469) begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_566) begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_577) begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_624) begin
        ap_sig_cseq_ST_st9_fsm_6 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st9_fsm_6 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_508) begin
        if (~(1'b0 == brmerge_i_i_reg_525)) begin
            axi_last_V_2_i_i_phi_fu_274_p4 = eol_reg_247;
        end else if ((1'b0 == brmerge_i_i_reg_525)) begin
            axi_last_V_2_i_i_phi_fu_274_p4 = AXI_video_strm_V_last_V_0_data_out;
        end else begin
            axi_last_V_2_i_i_phi_fu_274_p4 = ap_reg_phiprechg_axi_last_V_2_i_i_reg_269pp1_it1;
        end
    end else begin
        axi_last_V_2_i_i_phi_fu_274_p4 = ap_reg_phiprechg_axi_last_V_2_i_i_reg_269pp1_it1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~((ap_start == 1'b0) | (ap_done_reg == 1'b1)))) begin
        colorMode_out_blk_n = colorMode_out_full_n;
    end else begin
        colorMode_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_545)) begin
        colorMode_out_write = 1'b1;
    end else begin
        colorMode_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp2_stg0_fsm_5) & (1'b1 == ap_reg_ppiten_pp2_it1) & (1'b0 == eol_2_i_i_reg_294))) begin
        eol_2_i_i_phi_fu_297_p4 = AXI_video_strm_V_last_V_0_data_out;
    end else begin
        eol_2_i_i_phi_fu_297_p4 = eol_2_i_i_reg_294;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp1_stg0_fsm_4) & (1'b1 == ap_reg_ppiten_pp1_it1) & (1'b0 == exitcond3_i_i_reg_516))) begin
        eol_i_i_phi_fu_228_p4 = axi_last_V_2_i_i_phi_fu_274_p4;
    end else begin
        eol_i_i_phi_fu_228_p4 = eol_i_i_reg_224;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp1_stg0_fsm_4) & (1'b1 == ap_reg_ppiten_pp1_it1) & (1'b0 == exitcond3_i_i_reg_516))) begin
        img_V_val_V_blk_n = img_V_val_V_full_n;
    end else begin
        img_V_val_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp1_stg0_fsm_4) & (1'b1 == ap_reg_ppiten_pp1_it1) & (1'b0 == exitcond3_i_i_reg_516) & ~((1'b1 == ap_reg_ppiten_pp1_it1) & ap_sig_586))) begin
        img_V_val_V_write = 1'b1;
    end else begin
        img_V_val_V_write = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_508) begin
        if (~(1'b0 == brmerge_i_i_reg_525)) begin
            p_Val2_s_phi_fu_286_p4 = axi_data_V_1_i_i_reg_258;
        end else if ((1'b0 == brmerge_i_i_reg_525)) begin
            p_Val2_s_phi_fu_286_p4 = AXI_video_strm_V_data_V_0_data_out;
        end else begin
            p_Val2_s_phi_fu_286_p4 = ap_reg_phiprechg_p_Val2_s_reg_282pp1_it1;
        end
    end else begin
        p_Val2_s_phi_fu_286_p4 = ap_reg_phiprechg_p_Val2_s_reg_282pp1_it1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) | ((1'b1 == ap_sig_cseq_ST_pp1_stg0_fsm_4) & (1'b1 == ap_reg_ppiten_pp1_it1) & (1'b0 == exitcond3_i_i_reg_516) & (1'b0 == brmerge_i_i_reg_525)) | ((1'b1 == ap_sig_cseq_ST_pp2_stg0_fsm_5) & (1'b1 == ap_reg_ppiten_pp2_it1) & (1'b0 == eol_2_i_i_reg_294)))) begin
        s_axis_video_TDATA_blk_n = AXI_video_strm_V_data_V_0_state[1'b0];
    end else begin
        s_axis_video_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : begin
            if (~ap_sig_545) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : begin
            if ((~(AXI_video_strm_V_data_V_0_vld_out == 1'b0) & (1'b0 == tmp_user_V_fu_343_p1))) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else if ((~(AXI_video_strm_V_data_V_0_vld_out == 1'b0) & ~(1'b0 == tmp_user_V_fu_343_p1))) begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end
        end
        ap_ST_st3_fsm_2 : begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        ap_ST_st4_fsm_3 : begin
            if (~(1'b0 == exitcond2_i_i_fu_364_p2)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_pp1_stg0_fsm_4;
            end
        end
        ap_ST_pp1_stg0_fsm_4 : begin
            if (~((1'b1 == ap_sig_cseq_ST_pp1_stg0_fsm_4) & (1'b1 == ap_reg_ppiten_pp1_it1) & ~((1'b1 == ap_reg_ppiten_pp1_it1) & ap_sig_586) & ~(1'b1 == ap_reg_ppiten_pp1_it0))) begin
                ap_NS_fsm = ap_ST_pp1_stg0_fsm_4;
            end else if (((1'b1 == ap_sig_cseq_ST_pp1_stg0_fsm_4) & (1'b1 == ap_reg_ppiten_pp1_it1) & ~((1'b1 == ap_reg_ppiten_pp1_it1) & ap_sig_586) & ~(1'b1 == ap_reg_ppiten_pp1_it0))) begin
                ap_NS_fsm = ap_ST_pp2_stg0_fsm_5;
            end else begin
                ap_NS_fsm = ap_ST_pp1_stg0_fsm_4;
            end
        end
        ap_ST_pp2_stg0_fsm_5 : begin
            if (~((1'b1 == ap_sig_cseq_ST_pp2_stg0_fsm_5) & (1'b1 == ap_reg_ppiten_pp2_it1) & ~((1'b1 == ap_reg_ppiten_pp2_it1) & ap_sig_599) & ~(1'b1 == ap_reg_ppiten_pp2_it0))) begin
                ap_NS_fsm = ap_ST_pp2_stg0_fsm_5;
            end else if (((1'b1 == ap_sig_cseq_ST_pp2_stg0_fsm_5) & (1'b1 == ap_reg_ppiten_pp2_it1) & ~((1'b1 == ap_reg_ppiten_pp2_it1) & ap_sig_599) & ~(1'b1 == ap_reg_ppiten_pp2_it0))) begin
                ap_NS_fsm = ap_ST_st9_fsm_6;
            end else begin
                ap_NS_fsm = ap_ST_pp2_stg0_fsm_5;
            end
        end
        ap_ST_st9_fsm_6 : begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign AXI_video_strm_V_data_V_0_ack_in = AXI_video_strm_V_data_V_0_state[1'b1];

assign AXI_video_strm_V_data_V_0_load_A = (AXI_video_strm_V_data_V_0_state_cmp_full & ~AXI_video_strm_V_data_V_0_sel_wr);

assign AXI_video_strm_V_data_V_0_load_B = (AXI_video_strm_V_data_V_0_sel_wr & AXI_video_strm_V_data_V_0_state_cmp_full);

assign AXI_video_strm_V_data_V_0_sel = AXI_video_strm_V_data_V_0_sel_rd;

assign AXI_video_strm_V_data_V_0_state_cmp_full = ((AXI_video_strm_V_data_V_0_state != ap_const_lv2_1) ? 1'b1 : 1'b0);

assign AXI_video_strm_V_data_V_0_vld_in = s_axis_video_TVALID;

assign AXI_video_strm_V_data_V_0_vld_out = AXI_video_strm_V_data_V_0_state[1'b0];

assign AXI_video_strm_V_dest_V_0_vld_in = s_axis_video_TVALID;

assign AXI_video_strm_V_last_V_0_ack_in = AXI_video_strm_V_last_V_0_state[1'b1];

assign AXI_video_strm_V_last_V_0_load_A = (AXI_video_strm_V_last_V_0_state_cmp_full & ~AXI_video_strm_V_last_V_0_sel_wr);

assign AXI_video_strm_V_last_V_0_load_B = (AXI_video_strm_V_last_V_0_sel_wr & AXI_video_strm_V_last_V_0_state_cmp_full);

assign AXI_video_strm_V_last_V_0_sel = AXI_video_strm_V_last_V_0_sel_rd;

assign AXI_video_strm_V_last_V_0_state_cmp_full = ((AXI_video_strm_V_last_V_0_state != ap_const_lv2_1) ? 1'b1 : 1'b0);

assign AXI_video_strm_V_last_V_0_vld_in = s_axis_video_TVALID;

assign AXI_video_strm_V_last_V_0_vld_out = AXI_video_strm_V_last_V_0_state[1'b0];

assign AXI_video_strm_V_user_V_0_ack_in = AXI_video_strm_V_user_V_0_state[1'b1];

assign AXI_video_strm_V_user_V_0_load_A = (AXI_video_strm_V_user_V_0_state_cmp_full & ~AXI_video_strm_V_user_V_0_sel_wr);

assign AXI_video_strm_V_user_V_0_load_B = (AXI_video_strm_V_user_V_0_sel_wr & AXI_video_strm_V_user_V_0_state_cmp_full);

assign AXI_video_strm_V_user_V_0_sel = AXI_video_strm_V_user_V_0_sel_rd;

assign AXI_video_strm_V_user_V_0_state_cmp_full = ((AXI_video_strm_V_user_V_0_state != ap_const_lv2_1) ? 1'b1 : 1'b0);

assign AXI_video_strm_V_user_V_0_vld_in = s_axis_video_TVALID;

assign AXI_video_strm_V_user_V_0_vld_out = AXI_video_strm_V_user_V_0_state[1'b0];

assign Height_out_din = Height;

assign HwReg_WidthOut_out_din = HwReg_WidthOut;

assign WidthIn_out_din = WidthIn;

assign ap_reg_phiprechg_axi_last_V_2_i_i_reg_269pp1_it1 = 'bx;

assign ap_reg_phiprechg_p_Val2_s_reg_282pp1_it1 = 'bx;

always @ (*) begin
    ap_sig_25 = (ap_CS_fsm[ap_const_lv32_0] == 1'b1);
end

always @ (*) begin
    ap_sig_469 = (1'b1 == ap_CS_fsm[ap_const_lv32_1]);
end

always @ (*) begin
    ap_sig_476 = (1'b1 == ap_CS_fsm[ap_const_lv32_4]);
end

always @ (*) begin
    ap_sig_495 = (1'b1 == ap_CS_fsm[ap_const_lv32_5]);
end

always @ (*) begin
    ap_sig_508 = ((1'b1 == ap_sig_cseq_ST_pp1_stg0_fsm_4) & (1'b1 == ap_reg_ppiten_pp1_it1) & (1'b0 == exitcond3_i_i_reg_516));
end

always @ (*) begin
    ap_sig_545 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | (Height_out_full_n == 1'b0) | (WidthIn_out_full_n == 1'b0) | (colorMode_out_full_n == 1'b0) | (HwReg_WidthOut_out_full_n == 1'b0));
end

always @ (*) begin
    ap_sig_566 = (1'b1 == ap_CS_fsm[ap_const_lv32_2]);
end

always @ (*) begin
    ap_sig_577 = (1'b1 == ap_CS_fsm[ap_const_lv32_3]);
end

always @ (*) begin
    ap_sig_586 = (((1'b0 == exitcond3_i_i_reg_516) & (1'b0 == brmerge_i_i_reg_525) & (AXI_video_strm_V_data_V_0_vld_out == 1'b0)) | ((1'b0 == exitcond3_i_i_reg_516) & (img_V_val_V_full_n == 1'b0)));
end

always @ (*) begin
    ap_sig_599 = ((1'b0 == eol_2_i_i_reg_294) & (AXI_video_strm_V_data_V_0_vld_out == 1'b0));
end

always @ (*) begin
    ap_sig_624 = (1'b1 == ap_CS_fsm[ap_const_lv32_6]);
end

assign brmerge_i_i_fu_393_p2 = (sof_1_i_i_fu_108 | eol_i_i_phi_fu_228_p4);

assign colorMode_out_din = colorMode;

assign exitcond2_i_i_fu_364_p2 = ((i_cast_i_i_fu_360_p1 == tmp_43_reg_495) ? 1'b1 : 1'b0);

assign exitcond3_i_i_fu_379_p2 = ((j_cast_i_i_fu_375_p1 == tmp_reg_470) ? 1'b1 : 1'b0);

assign i_cast_i_i_fu_360_p1 = i_i_i_reg_213;

assign i_fu_369_p2 = (i_i_i_reg_213 + ap_const_lv12_1);

assign img_V_val_V_din = {{{pix_val_2_V_1_fu_428_p3}, {pix_val_1_V_1_fu_435_p3}}, {pix_val_0_V_fu_442_p3}};

assign j_cast_i_i_fu_375_p1 = j_i_i_reg_236;

assign j_fu_384_p2 = (j_i_i_reg_236 + ap_const_lv12_1);

assign pix_val_0_V_3_fu_404_p4 = {{p_Val2_s_phi_fu_286_p4[ap_const_lv32_17 : ap_const_lv32_10]}};

assign pix_val_0_V_fu_442_p3 = ((sel_tmp2_reg_500[0:0] === 1'b1) ? pix_val_0_V_3_fu_404_p4 : pix_val_1_V_2_fu_414_p1);

assign pix_val_1_V_1_fu_435_p3 = ((sel_tmp2_reg_500[0:0] === 1'b1) ? pix_val_1_V_2_fu_414_p1 : pix_val_2_V_fu_418_p4);

assign pix_val_1_V_2_fu_414_p1 = p_Val2_s_phi_fu_286_p4[7:0];

assign pix_val_2_V_1_fu_428_p3 = ((sel_tmp2_reg_500[0:0] === 1'b1) ? pix_val_2_V_fu_418_p4 : pix_val_0_V_3_fu_404_p4);

assign pix_val_2_V_fu_418_p4 = {{p_Val2_s_phi_fu_286_p4[ap_const_lv32_F : ap_const_lv32_8]}};

assign s_axis_video_TREADY = AXI_video_strm_V_dest_V_0_state[1'b1];

assign sel_tmp2_fu_350_p2 = ((colorMode == ap_const_lv8_0) ? 1'b1 : 1'b0);

assign tmp_43_fu_347_p1 = Height[12:0];

assign tmp_fu_339_p1 = WidthIn[12:0];

assign tmp_user_V_fu_343_p1 = AXI_video_strm_V_user_V_0_data_out;

endmodule //bd_776d_hsc_0_v_hscaler_AXIvideo2MultiPixStream57
